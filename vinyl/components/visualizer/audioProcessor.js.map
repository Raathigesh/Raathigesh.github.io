{"version":3,"sources":["components/visualizer/audioProcessor.ts"],"names":["AudioProcessor","AudioProcessor.constructor","AudioProcessor.start","AudioProcessor.start.decodeAudioDataFailed"],"mappings":";;;;;;;;;;;;;AAMA;IASIA,wBAAYA,QAAwBA,EAAEA,QAAkBA;QAT5DC,iBAkECA;QAvBUA,iBAAYA,GAAGA;YAClBA,IAAIA,KAAKA,GAAGA,IAAIA,UAAUA,CAACA,KAAIA,CAACA,QAAQA,CAACA,iBAAiBA,CAACA,CAACA;YAE5DA,KAAIA,CAACA,QAAQA,CAACA,oBAAoBA,CAACA,KAAKA,CAACA,CAACA;YAE1CA,KAAIA,CAACA,QAAQA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAAAA;YAE3BA,KAAIA,CAACA,QAAQA,CAACA,QAAQA,CAACA,KAAIA,CAACA,YAAYA,CAACA,WAAWA,CAACA,CAACA;QAC1DA,CAACA,CAAAA;QAUMA,YAAOA,GAAGA,UAACA,aAAkBA;YAChCA,AACAA,6CAD6CA;YAC7CA,KAAIA,CAACA,YAAYA,CAACA,MAAMA,GAAGA,aAAaA,CAAAA;YACxCA,KAAIA,CAACA,YAAYA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;QAC/BA,CAACA,CAAAA;QAtDGA,IAAIA,CAACA,QAAQA,GAAGA,QAAQA,CAACA;QAEzBA,AACAA,uBADuBA;QACvBA,IAAIA,CAACA,YAAYA,GAAGA,IAAIA,YAAYA,EAAEA,CAACA;QAEvCA,AACAA,4BAD4BA;QAC5BA,IAAIA,CAACA,cAAcA,GAAGA,IAAIA,CAACA,YAAYA,CAACA,qBAAqBA,CAACA,IAAIA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;QAC1EA,IAAIA,CAACA,cAAcA,CAACA,OAAOA,CAACA,IAAIA,CAACA,YAAYA,CAACA,WAAWA,CAACA,CAACA;QAE3DA,AACAA,0BAD0BA;QAC1BA,IAAIA,CAACA,YAAYA,GAAGA,IAAIA,CAACA,YAAYA,CAACA,kBAAkBA,EAAEA,CAACA;QAE3DA,AACAA,0BAD0BA;QAC1BA,IAAIA,CAACA,QAAQA,GAAGA,IAAIA,CAACA,YAAYA,CAACA,cAAcA,EAAEA,CAACA;QACnDA,IAAIA,CAACA,QAAQA,CAACA,qBAAqBA,GAAGA,GAAGA,CAACA;QAC1CA,IAAIA,CAACA,QAAQA,CAACA,OAAOA,GAAGA,GAAGA,CAACA;QAE5BA,AACAA,4BAD4BA;QAC5BA,IAAIA,CAACA,YAAYA,CAACA,OAAOA,CAACA,IAAIA,CAACA,QAAQA,CAACA,CAACA;QAEzCA,AACAA,sBADsBA;QACtBA,IAAIA,CAACA,QAAQA,CAACA,OAAOA,CAACA,IAAIA,CAACA,cAAcA,CAACA,CAACA;QAE3CA,AACAA,4BAD4BA;QAC5BA,IAAIA,CAACA,YAAYA,CAACA,OAAOA,CAACA,IAAIA,CAACA,YAAYA,CAACA,WAAWA,CAACA,CAACA;QAEzDA,AACAA,oCADoCA;QACpCA,IAAIA,CAACA,cAAcA,CAACA,cAAcA,GAAGA,IAAIA,CAACA,YAAYA,CAACA;QAEvDA,IAAIA,CAACA,QAAQA,GAAGA,QAAQA,CAACA;IAC7BA,CAACA;IAYMD,8BAAKA,GAAZA,UAAaA,MAAWA;QACpBE,IAAIA,CAACA,YAAYA,CAACA,eAAeA,CAACA,MAAMA,EAAEA,IAAIA,CAACA,OAAOA,EAAEA,qBAAqBA,CAACA,CAACA;QAE/EA;YACIC,QAAQA,CAAAA;QACZA,CAACA;IACLD,CAACA;IAOLF,qBAACA;AAADA,CAlEA,AAkECA,IAAA;AAlEY,sBAAc,iBAkE1B,CAAA","file":"components/visualizer/audioProcessor.js","sourcesContent":["///<reference path=\"visualRenderer.ts\" />\r\nimport {VisualRenderer} from \"visualRenderer\"\r\nimport {Timeline} from \"components/timeline/timeline\"\r\n\r\ndeclare var AudioContext: any;\r\n\r\nexport class AudioProcessor {\r\n    javascriptNode: any;\r\n    audioContext: any;\r\n    sourceBuffer: any;\r\n    analyser: any;\r\n\r\n    renderer: VisualRenderer;\r\n    timeline: Timeline;\r\n\r\n    constructor(renderer: VisualRenderer, timeline: Timeline) {\r\n\r\n        this.timeline = timeline;\r\n        \r\n        //get the audio context\r\n        this.audioContext = new AudioContext();\r\n\t\r\n        //create the javascript node\r\n        this.javascriptNode = this.audioContext.createScriptProcessor(2048, 1, 1);\r\n        this.javascriptNode.connect(this.audioContext.destination);\r\n\t\r\n        //create the source buffer\r\n        this.sourceBuffer = this.audioContext.createBufferSource();\r\n\t\r\n        //create the analyser node\r\n        this.analyser = this.audioContext.createAnalyser();\r\n        this.analyser.smoothingTimeConstant = 0.3;\r\n        this.analyser.fftSize = 512;\r\n\t\r\n        //connect source to analyser\r\n        this.sourceBuffer.connect(this.analyser);\r\n\t\r\n        //analyser to speakers\r\n        this.analyser.connect(this.javascriptNode);\r\n\t\r\n        //connect source to analyser\r\n        this.sourceBuffer.connect(this.audioContext.destination);\r\n\t\t\r\n        //this is where we animates the bars\r\n        this.javascriptNode.onaudioprocess = this.onProcessing;\r\n\r\n        this.renderer = renderer;\r\n    }\r\n\r\n    public onProcessing = () => {\r\n        var array = new Uint8Array(this.analyser.frequencyBinCount);\r\n\r\n        this.analyser.getByteFrequencyData(array);\r\n\r\n        this.renderer.render(array)\r\n\r\n        this.timeline.headStep(this.audioContext.currentTime);\r\n    }\r\n\r\n    public start(buffer: any) {\r\n        this.audioContext.decodeAudioData(buffer, this.success, decodeAudioDataFailed);\r\n\r\n        function decodeAudioDataFailed() {\r\n            debugger\r\n        }\r\n    }\r\n\r\n    public success = (decodedBuffer: any) => {\r\n        //this.timelineRendere.render(decodedBuffer);\r\n        this.sourceBuffer.buffer = decodedBuffer\r\n        this.sourceBuffer.start(0);\r\n    }\r\n}"],"sourceRoot":"/source/"}